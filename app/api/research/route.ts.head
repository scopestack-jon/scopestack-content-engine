console.log("OPENROUTER_API_KEY:", process.env.OPENROUTER_API_KEY);
import { generateText } from "ai"
import type { NextRequest } from "next/server"

// Add the JSON response instruction constant
const JSON_RESPONSE_INSTRUCTION = `

CRITICAL RESPONSE FORMAT:
- Return ONLY valid JSON
- NO markdown code blocks (no \`\`\`json or \`\`\`)
- NO explanations before or after the JSON
- NO comments within the JSON
- Start response with { and end with }
- Complete the entire JSON structure
- Validate JSON syntax before returning
- DO NOT nest your response inside fields like "email_migration_research" or "research_findings"
- Use a flat structure with top-level fields

CRITICAL FOR URLS:
- Always use properly formatted URLs (e.g., "https://example.com")
- Never use double quotes within double quotes (e.g., ""https://example.com"")
- If you don't know the exact URL, use "https://example.com" as a placeholder
- Format URLs in sources as: { "url": "https://example.com", "title": "Source Title" }

CRITICAL FOR NESTED STRUCTURES:
- Ensure all arrays and objects are properly closed
- Check that all opening braces { have matching closing braces }
- Check that all opening brackets [ have matching closing brackets ]
- Ensure all property names are in double quotes
- Ensure all string values are in double quotes

RESPOND WITH PURE JSON ONLY.
`;

const DEFAULT_PROMPTS = {
  parsing: `Analyze this technology solution request and extract key information:

"{input}"

Extract and return in JSON format:
- technology: main technology/platform
- scale: number of users/size
- industry: industry sector
- compliance: compliance requirements
- complexity: complexity factors

Be specific and detailed.${JSON_RESPONSE_INSTRUCTION}`,

  research: `Based on this technology solution: "{input}"

Conduct comprehensive research and provide detailed findings about:
1. Implementation methodologies and frameworks
2. Industry best practices and standards
3. Professional services approaches
4. Hour estimates based on complexity
5. Common challenges and solutions
6. Compliance considerations
7. Testing and validation approaches
8. Specific service breakdown requirements
9. Subservice components and dependencies
10. Resource allocation patterns

IMPORTANT: At the end of your research, list the specific sources you would reference for this technology, including:
- Vendor documentation URLs
- Industry standards documents
- Best practice guides
- Case studies
- Professional services benchmarks

Format sources as: SOURCE: [URL] | [Title] | [Relevance]

Provide specific, actionable research findings that would inform professional services scoping.
Focus on current 2024-2025 industry standards and practices.
Include enough detail to generate at least 10 distinct services with 3 subservices each.${JSON_RESPONSE_INSTRUCTION}`,

  analysis: `Analyze these research findings and create structured insights:

Research: {researchFindings}
Original Request: {input}

Create analysis covering:
- Key implementation phases with realistic timelines
- Critical success factors based on industry data
- Resource requirements with skill level specifications
- Risk mitigation strategies from real-world implementations
- Quality assurance approaches following industry standards
- Detailed service breakdown analysis
- Subservice component identification
- Hour estimation methodologies

IMPORTANT: Ensure your analysis provides enough detail to support generating:
- MINIMUM 10 distinct professional services
- Each service must have exactly 3 subservices
- Realistic hour estimates for each component

Base your analysis on current professional services benchmarks and proven methodologies.${JSON_RESPONSE_INSTRUCTION}`,
}

// Generic function to call OpenRouter API for any model
async function callOpenRouter({ model, prompt }: { model: string; prompt: string }): Promise<string> {
  const apiKey = process.env.OPENROUTER_API_KEY
  if (!apiKey) throw new Error("No OpenRouter API key set")

  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${apiKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model,
      messages: [
        { role: "user", content: prompt }
      ],
      max_tokens: 2048,
      temperature: 0.7,
      stream: false
    })
  })

  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`OpenRouter API error: ${response.status} ${errorText}`)
  }

  const data = await response.json()
  // OpenRouter returns choices[0].message.content
  return data.choices?.[0]?.message?.content || ""
}

// Update generateTextWithTimeout to use callOpenRouter
async function generateTextWithTimeout(
  options: { model: string; prompt: string },
  timeoutMs: number = 120000, // 2 minutes default timeout
  stepName: string = "AI call"
): Promise<{ text: string }> {
  const startTime = Date.now()
  console.log(`[${stepName}] Starting with model: ${options.model}, prompt length: ${options.prompt.length}`)
  
  try {
    const timeoutPromise = new Promise<{ text: string }>((_, reject) => {
      setTimeout(() => {
        reject(new Error(`[${stepName}] Timed out after ${timeoutMs}ms`))
      }, timeoutMs)
    })

    const resultPromise = (async (): Promise<{ text: string }> => {
      const text = await callOpenRouter(options)
      return { text }
    })()

    const result = await Promise.race([resultPromise, timeoutPromise])

    const duration = Date.now() - startTime
    console.log(`[${stepName}] Completed successfully in ${duration}ms`)
    console.log(`[${stepName}] Response length: ${result.text?.length || 0} characters`)

    return result
  } catch (error: any) {
    const duration = Date.now() - startTime
    console.error(`[${stepName}] Failed after ${duration}ms:`, {
      error: error.message,
      stepName,
      model: options.model,
      promptLength: options.prompt?.length || 0
    })
    throw error
  }
}

// Function removed - no longer using fallback content
        },
        {
          name: "Requirements Documentation",
          description: "Comprehensive functional and non-functional requirements",
          hours: 8, // Reduced from 32
          mappedQuestions: ["security-compliance-level", "disaster-recovery-requirements"],
          calculationSlug: "security-requirements-multiplier",
        },
        {
          name: "Consensus Building",
          description: "Facilitated sessions to align stakeholders on priorities",
          hours: 4, // Reduced from 16
          mappedQuestions: ["budget-procurement"],
        },
      ],
    },
    {
      phase: "Design",
      service: "Solution Architecture & Technical Design",
      description: "Detailed technical architecture and integration design",
      hours: 32, // Reduced from 160
      subservices: [
        {
          name: "Architecture Design",
          description: "High-level and detailed technical architecture",
          hours: 16, // Reduced from 64
          mappedQuestions: ["performance-scalability"],
        },
        {
