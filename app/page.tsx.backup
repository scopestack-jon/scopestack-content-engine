"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Loader2, Search, Brain, FileText, CheckCircle, Settings, Calculator, RotateCcw } from "lucide-react"
import { ResearchProgress } from "./components/research-progress"
import ContentOutput from "./components/content-output"
import { SourceAttribution } from "./components/source-attribution"
import Link from "next/link"

interface ResearchStep {
  id: string
  title: string
  status: "pending" | "active" | "completed" | "error"
  model?: string
  sources?: string[]
}

interface GeneratedContent {
  technology: string
  questions: Array<{
    id: string
    slug: string
    question: string
    options: Array<{
      key: string
      value: number | string
      default?: boolean
    }>
  }>
  calculations: Array<{
    id: string
    slug: string
    name: string
    description: string
    formula: string
    mappedQuestions: string[]
    resultType: "multiplier" | "additive" | "conditional"
  }>
  services: Array<{
    phase: string
    service?: string
    name?: string
    description: string
    hours: number
    serviceDescription?: string
    keyAssumptions?: string
    clientResponsibilities?: string
    outOfScope?: string
    subservices: Array<{
      name: string
      description: string
      hours: number
      mappedQuestions?: string[]
      calculationSlug?: string
      serviceDescription?: string
      keyAssumptions?: string
      clientResponsibilities?: string
      outOfScope?: string
    }>
  }>
  totalHours: number
  sources: Array<{
    url: string
    title: string
    relevance: string
  }>
}

export default function ScopeStackContentEngine() {
  const [userInput, setUserInput] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)
  const [researchSteps, setResearchSteps] = useState<ResearchStep[]>([])
  const [generatedContent, setGeneratedContent] = useState<GeneratedContent | null>(null)
  const [progress, setProgress] = useState(0)
  const [isResearchCollapsed, setIsResearchCollapsed] = useState(false)

  useEffect(() => {
    // Load saved content and input from localStorage
    const savedContent = localStorage.getItem("generated_content")
    const savedInput = localStorage.getItem("user_input")

    console.log("Initial load from localStorage:", {
      savedContent: savedContent ? "exists" : "null",
      savedInput,
      savedInputLength: savedInput?.length || 0
    })

    if (savedContent) {
      try {
        setGeneratedContent(JSON.parse(savedContent))
      } catch (e) {
        console.error("Failed to parse saved content:", e)
      }
    }

    if (savedInput) {
      console.log("Setting userInput from localStorage:", savedInput)
      setUserInput(savedInput)
    } else {
      console.log("No saved input found in localStorage")
    }

    // Log current settings for debugging
    console.log("Current settings loaded:", {
      researchModel: localStorage.getItem("research_model") || "default",
      analysisModel: localStorage.getItem("analysis_model") || "default", 
      contentModel: localStorage.getItem("content_model") || "default",
      formatModel: localStorage.getItem("format_model") || "default",
      hasCustomPrompts: {
        parsing: !!localStorage.getItem("parsing_prompt"),
        research: !!localStorage.getItem("research_prompt"),
        analysis: !!localStorage.getItem("analysis_prompt"),
      }
    })
  }, [])

  // Save content whenever it changes
  useEffect(() => {
    if (generatedContent) {
      console.log("Generated content state updated:", generatedContent)
      localStorage.setItem("generated_content", JSON.stringify(generatedContent))
      setIsResearchCollapsed(true) // Auto-collapse when new content is generated
    }
  }, [generatedContent])

  // Save input whenever it changes
  useEffect(() => {
    if (userInput) {
      localStorage.setItem("user_input", userInput)
    }
    // Debug why the button might be disabled
    console.log("Input state updated:", {
      userInput,
      isEmpty: !userInput.trim(),
      isProcessing,
      buttonDisabled: !userInput.trim() || isProcessing
    })
  }, [userInput, isProcessing])

  const handleClearContent = () => {
    // Clear all state
    setGeneratedContent(null)
    setUserInput("")
    setResearchSteps([])
    setProgress(0)
    setIsResearchCollapsed(false)
    
    // Clear localStorage
    localStorage.removeItem("generated_content")
    localStorage.removeItem("user_input")
    
    // Provide user feedback
    console.log("Content and input cleared successfully")
  }

  const handleGenerate = async () => {
    console.log("Generate button clicked", { userInput })
    if (!userInput.trim()) return

    setIsProcessing(true)
    setProgress(0)
    setGeneratedContent(null)
    setIsResearchCollapsed(false)

    // Initialize research steps
    const steps: ResearchStep[] = [
      { id: "parse", title: "Parsing Technology Requirements", status: "active" },
      { id: "research", title: "Conducting Live Web Research", status: "pending" },
      { id: "analyze", title: "Analyzing Research Findings", status: "pending" },
      { id: "generate", title: "Generating Content Structure", status: "pending" },
      { id: "format", title: "Formatting for ScopeStack", status: "pending" },
    ]
    setResearchSteps(steps)

    try {
      // Step 1: Parse technology requirements
      setProgress(10)
      await new Promise((resolve) => setTimeout(resolve, 1000))

      console.log("Sending research request to API...")
      const response = await fetch("/api/research", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          input: userInput,
          models: {
            research: localStorage.getItem("research_model") || "anthropic/claude-3.5-sonnet",
            analysis: localStorage.getItem("analysis_model") || "openai/gpt-4-turbo",
            content: localStorage.getItem("content_model") || "anthropic/claude-3.5-sonnet",
            format: localStorage.getItem("format_model") || "openai/gpt-4o",
          },
          prompts: {
            parsing: localStorage.getItem("parsing_prompt"),
            research: localStorage.getItem("research_prompt"),
            analysis: localStorage.getItem("analysis_prompt"),
          },
        }),
      })

      if (!response.ok) {
        console.error("Research API response not OK:", response.status, response.statusText)
        throw new Error(`Research failed with status ${response.status}`)
      }

      console.log("Research API response received, setting up SSE reader...")
      const reader = response.body?.getReader()
      if (!reader) throw new Error("No response stream")

      const decoder = new TextDecoder()
      let buffer = ""

      console.log("Starting to read SSE stream...")
      
      try {
        while (true) {
          const { done, value } = await reader.read()
          if (done) {
            console.log("SSE stream complete")
            break
          }

          buffer += decoder.decode(value, { stream: true })
          const lines = buffer.split("\n")
          buffer = lines.pop() || ""

          for (const line of lines) {
            if (line.startsWith("data: ")) {
              try {
                console.log("SSE event received:", line.slice(6, 100) + "...")
                const data = JSON.parse(line.slice(6))

                if (data.type === "step") {
                  console.log("Step update:", data.stepId, data.status, data.progress)
                  setResearchSteps((prev) =>
                    prev.map((step) =>
                      step.id === data.stepId
                        ? { ...step, status: data.status, model: data.model, sources: data.sources }
                        : step,
                    ),
                  )
                  setProgress(data.progress)
                } else if (data.type === "complete") {
                  console.log("Complete event received")
                  console.log("Content received:", {
                    technology: data.content?.technology,
                    servicesCount: data.content?.services?.length,
                    questionsCount: data.content?.questions?.length,
                    services: data.content?.services,
                    isServicesArray: Array.isArray(data.content?.services),
                    contentValid: !!data.content && !!data.content.services && Array.isArray(data.content.services)
                  })
                  
                  // Validate content before setting it
                  if (!data.content) {
                    console.error("Content is missing in the response")
                    alert("Content generation failed: Missing content in the response")
                    setIsProcessing(false)
                    return
                  }
                  
                  // Ensure we have a technology field
                  if (!data.content.technology) {
                    data.content.technology = userInput || "Technology Solution"
                  }
                  
                  // Ensure services is an array
                  if (!data.content.services || !Array.isArray(data.content.services)) {
                    console.error("Services is missing or not an array")
                    data.content.services = []
                  }
                  
                  // If services array is empty, create a default service structure
                  if (data.content.services.length === 0) {
                    console.log("Creating default services because none were found")
                    
                    // Create a default service structure based on the technology
                    const technology = data.content.technology || userInput || "Technology Solution"
                    
                    data.content.services = [
                      {
                        phase: "Planning",
                        name: `${technology} Assessment`,
                        description: `Comprehensive assessment of requirements for ${technology}`,
                        hours: 40,
                        subservices: [
                          {
                            name: "Requirements Gathering",
                            description: `Detailed collection of requirements for ${technology}`,
                            hours: 16,
                            serviceDescription: `This service focuses on gathering detailed requirements for your ${technology} implementation. Our team will conduct stakeholder interviews, document technical specifications, and identify key success factors for your project.`,
                            keyAssumptions: `Client stakeholders will be available for requirements gathering sessions. Existing documentation will be provided where available.`,
                            clientResponsibilities: `Provide access to key stakeholders and subject matter experts. Share existing documentation and business processes.`,
                            outOfScope: `Development of custom solutions outside standard ${technology} capabilities. Business process reengineering.`
                          },
                          {
                            name: "Current State Analysis",
                            description: `Analysis of current environment for ${technology} implementation`,
                            hours: 16,
                            serviceDescription: `This service provides a comprehensive analysis of your current environment to prepare for ${technology} implementation. Our experts will evaluate existing systems, identify potential challenges, and document the baseline configuration.`,
                            keyAssumptions: `Access to current systems and documentation will be provided. Technical staff will be available for interviews and questions.`,
                            clientResponsibilities: `Provide access to systems and environments. Make technical staff available for consultation. Provide existing documentation.`,
                            outOfScope: `Remediation of issues found during analysis. Implementation of recommendations.`
                          },
                          {
                            name: "Planning Documentation",
                            description: `Creation of planning documents for ${technology} implementation`,
                            hours: 8,
                            serviceDescription: `This service delivers comprehensive planning documentation for your ${technology} implementation. Our team will create detailed project plans, technical specifications, and implementation roadmaps tailored to your requirements.`,
                            keyAssumptions: `Requirements gathering and current state analysis have been completed. Client approval process is clearly defined.`,
                            clientResponsibilities: `Review and approve documentation in a timely manner. Provide feedback on drafts and technical specifications.`,
                            outOfScope: `Development of custom templates or non-standard documentation formats. Translation to languages other than English.`
                          }
                        ]
                      },
                      {
                        phase: "Implementation",
                        name: `${technology} Implementation`,
                        description: `Core implementation of ${technology} solution`,
                        hours: 80,
                        subservices: [
                          {
                            name: "Configuration",
                            description: `Configuration of ${technology} components`,
                            hours: 40,
                            serviceDescription: `This service provides expert configuration of all ${technology} components according to best practices and your specific requirements. Our team will implement the solution with attention to security, performance, and usability.`,
                            keyAssumptions: `Planning phase has been completed and approved. Required infrastructure is available and accessible.`,
                            clientResponsibilities: `